<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>螺旋矩阵</title>
      <link href="/2023/02/17/2023-2-17-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
      <url>/2023/02/17/2023-2-17-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>派大星的复习课</title>
      <link href="/2023/02/14/2023-2-14-%E6%B4%BE%E5%A4%A7%E6%98%9F%E7%9A%84%E5%A4%8D%E4%B9%A0%E8%AF%BE/"/>
      <url>/2023/02/14/2023-2-14-%E6%B4%BE%E5%A4%A7%E6%98%9F%E7%9A%84%E5%A4%8D%E4%B9%A0%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>要期末考试了，再看一遍派大星的程C复习课，记点笔记也算是复习的一部分吧。</p><h2 id="数组和字符串"><a href="#数组和字符串" class="headerlink" title="数组和字符串"></a>数组和字符串</h2><p>关于 <strong>内存占用</strong>，<strong>strlen</strong>，<strong>sizeof</strong>, <strong>strcpy</strong>, <strong>strcat</strong>,  <strong>strcmp</strong></p><p>字符串&#x3D;字符数组+’\0’</p><p>\0作为结束</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;; <span class="comment">//字符数组 ———&gt;a[4]</span></span><br><span class="line"><span class="type">char</span> b[] = <span class="string">&quot;abcd&quot;</span>; <span class="comment">//字符串 ——&gt;b[5]</span></span><br><span class="line"><span class="comment">//本质上是\0的区别(内存占用)</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt; <span class="string">&quot;strlen(b)=&quot;</span> &lt;&lt; <span class="built_in">strlen</span>(b) &lt;&lt; endl;</span><br><span class="line">cout&lt;&lt; <span class="string">&quot;strlen(a)=&quot;</span> &lt;&lt; <span class="built_in">strlen</span>(a) &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*输出</span></span><br><span class="line"><span class="comment">strlen(b)=4</span></span><br><span class="line"><span class="comment">strlen(a)=4 */</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt; <span class="string">&quot;sizeof(b)=&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(b) &lt;&lt; endl;</span><br><span class="line">cout&lt;&lt; <span class="string">&quot;sizeof(a)=&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*输出</span></span><br><span class="line"><span class="comment">sizeof(b)=5</span></span><br><span class="line"><span class="comment">sizeof(a)=4 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c[<span class="number">50</span>] = <span class="string">&quot;a&quot;</span>; <span class="comment">//初始值的长度很关键</span></span><br><span class="line"><span class="built_in">strcpy</span>(c,<span class="string">&quot;give me&quot;</span>);<span class="comment">//一般c为普通的字符数组，大于“give me&quot;(8)时就能复制</span></span><br><span class="line">b=<span class="string">&quot; a cup of coffee&quot;</span></span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*输出</span></span><br><span class="line"><span class="comment">give me</span></span><br><span class="line"><span class="comment"> a cup of coffee*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcat</span>(c,b);<span class="comment">// cat拼接，即把b拼到c上  //c的初始值很关键</span></span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"><span class="comment">//输出 give me a cup of coffee</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(c, <span class="string">&quot;abcab&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(b, <span class="string">&quot;acd&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;strcmp(c, b)=&quot;</span> &lt;&lt; <span class="built_in">strcmp</span>(c, b) &lt;&lt; endl;</span><br><span class="line"><span class="comment">//输出 strcmp(c, b)=-1</span></span><br><span class="line"><span class="comment">//c&lt;b -&gt;-1</span></span><br><span class="line"><span class="comment">//c==b -&gt;0</span></span><br><span class="line"><span class="comment">//c&gt;b -&gt;1</span></span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>动态申请内存</p><p>​stu1.name &#x3D; (char *)malloc(20);</p><p>​free(stu1-&gt;name);</p><p>​stu *stu2 &#x3D;new stu;</p><p>​delete [] stu2</p><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>形参&#x2F;实参</p><p>void：无返回值，是一个过程</p><p>递归函数 要有终止条件</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>一维数组，二维数组，指针</p><ul><li>&amp;a&#x3D;x;</li><li>*&amp;a&#x3D;a;</li><li>*x&#x3D;a;</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一维数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; *(a + i) &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">//本质上a是指针 i是偏移量</span></span><br><span class="line">cout &lt;&lt; i[a] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出</span></span><br><span class="line"><span class="comment">1 1 1</span></span><br><span class="line"><span class="comment">2 2 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a[i] = *(a + i) = *(i+ a) = i[a]</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="type">double</span> b[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">11.1</span>, <span class="number">22.2</span>&#125;, &#123;<span class="number">33.3</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">cout &lt;&lt; b[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; *(b[i] + j) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; *(b + i)[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; *(*b + i) + j) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; *(*b + i * <span class="number">4</span> + j) &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">//4为宽度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据交换"><a href="#数据交换" class="headerlink" title="数据交换"></a>数据交换</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">a = a * b;</span><br><span class="line">b = a / b;</span><br><span class="line">a = a / b;</span><br></pre></td></tr></table></figure><h2 id="常用头文件"><a href="#常用头文件" class="headerlink" title="常用头文件"></a>常用头文件</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; y % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; y % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">-1</span>, b = <span class="number">4</span>;</span><br><span class="line">  <span class="type">int</span> c[<span class="number">9</span>] = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>&#125;;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;max(a,b)=&quot;</span> &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; endl;  <span class="comment">// &lt;algorithm&gt;</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;min(a,b)=&quot;</span> &lt;&lt; <span class="built_in">min</span>(a, b) &lt;&lt; endl;  <span class="comment">// &lt;algorithm&gt;</span></span><br><span class="line">  <span class="built_in">sort</span>(c, c + <span class="number">9</span>, cmp);                       <span class="comment">// &lt;algorithm&gt;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i : c) &#123;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;abs(a)=&quot;</span> &lt;&lt; <span class="built_in">abs</span>(a) &lt;&lt; endl;       <span class="comment">// &lt;cmath&gt; or &lt;math.h&gt;</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;sqrt(b)=&quot;</span> &lt;&lt; <span class="built_in">sqrt</span>(b) &lt;&lt; endl;     <span class="comment">// &lt;cmath&gt; or &lt;math.h&gt;</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;pow(b,2)=&quot;</span> &lt;&lt; <span class="built_in">pow</span>(b, <span class="number">2</span>) &lt;&lt; endl;  <span class="comment">// &lt;cmath&gt; or &lt;math.h&gt;</span></span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="type">char</span> d = <span class="string">&#x27;a&#x27;</span>, e = <span class="string">&#x27;1&#x27;</span>, f = <span class="string">&#x27;&amp;&#x27;</span>, g = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="built_in">isalnum</span>(d) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">isalnum</span>(e) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">isalnum</span>(f)</span><br><span class="line">       &lt;&lt; endl;  <span class="comment">// &lt;cctype&gt; or &lt;ctpye.h&gt;</span></span><br><span class="line">  cout &lt;&lt; <span class="built_in">isalpha</span>(d) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">isalpha</span>(e) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">isalpha</span>(f)</span><br><span class="line">       &lt;&lt; endl;  <span class="comment">// &lt;cctype&gt; or &lt;ctpye.h&gt;</span></span><br><span class="line">  cout &lt;&lt; <span class="built_in">isdigit</span>(d) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">isdigit</span>(e) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">isdigit</span>(f)</span><br><span class="line">       &lt;&lt; endl;  <span class="comment">// &lt;cctype&gt; or &lt;ctpye.h&gt;</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;tolower(g)=&quot;</span> &lt;&lt; <span class="built_in">tolower</span>(g) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">char</span>(<span class="built_in">tolower</span>(g))</span><br><span class="line">       &lt;&lt; endl;  <span class="comment">// &lt;cctype&gt; or &lt;ctpye.h&gt;</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;toupper(d)=&quot;</span> &lt;&lt; <span class="built_in">toupper</span>(d) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">char</span>(<span class="built_in">toupper</span>(d))</span><br><span class="line">       &lt;&lt; endl;  <span class="comment">// &lt;cctype&gt; or &lt;ctpye.h&gt;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环数组</title>
      <link href="/2023/01/03/2023-1-3-%E5%BE%AA%E7%8E%AF%E6%95%B0%E7%BB%84/"/>
      <url>/2023/01/03/2023-1-3-%E5%BE%AA%E7%8E%AF%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p><strong>break</strong>:跳出当前循环块（只能跳出一层）</p><p><strong>continue</strong>:跳过本次循环，进入下一次循环</p><p><strong>goto</strong></p><p>输入<strong>不说明有多少个</strong>Input Block, 以EOF为结束标志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C语法：</span><br><span class="line">while(scanf(&quot;%d%d&quot;,&amp;a,&amp;b)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C++语法：</span><br><span class="line">while(cin&gt;&gt;a&gt;&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>scanf函数</strong>返回值是读出的变量个数：</p><p>​若只有一个整数输入，返回值为1</p><p>​若有两个整数输入，返回值为2</p><p>​若没有输入，则返回值为-1</p><p><strong>EOF</strong>是一个预定义的常量，等于-1(输入行Ctrl+Z)</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组创建后须对其元素赋值，否则可造成不可知的错误</p><h3 id="runtime-error的其中一个原因"><a href="#runtime-error的其中一个原因" class="headerlink" title="runtime error的其中一个原因"></a>runtime error的其中一个原因</h3><p><strong>数组越界</strong></p><p>runtime error(RE): 运行时出错</p><h3 id="一维数组的初始化"><a href="#一维数组的初始化" class="headerlink" title="一维数组的初始化"></a>一维数组的初始化</h3><ol><li>int a[5]&#x3D;{1,2,3,4,5};</li><li>int a[10]&#x3D;{0,1,2,3,4};&#x2F;&#x2F;不推荐，只给前面五个元素赋值，后五个元素系统默认为0</li><li>int a[]&#x3D;{0,1,2,3,4};&#x2F;&#x2F;等价于int a[5]&#x3D;{0,1,2,3,4};&#x2F;&#x2F;不推荐</li></ol><h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类型的范围区间</title>
      <link href="/2023/01/03/2023-1-3-%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4%E5%8C%BA%E9%97%B4/"/>
      <url>/2023/01/03/2023-1-3-%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4%E5%8C%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>C&#x2F;C++ 规定 类型的范围区间为 -2的(n-1)次方 —–  2的(n-1)次方-1 </p><p>以字符char 为例</p><p>占用一个字节，那么它可以表示的区间就是 -128 –  127， 共256个数</p><p>那么如果给char变量复制 128，会发生什么</p><p>调试结果char的值居然是 -128</p><p>当值大于127时，会回到-128，然后继续向右走，也就是说：</p><p>128   &#x3D;&#x3D;  -128</p><p>129   &#x3D;&#x3D;  -127</p><p>130   &#x3D;&#x3D;  -126</p><p>…….</p><p>从而得到数值会在256个数上依次循环，而256就是2的8次方。</p><p>所以计算真实值时，按照以下步骤：</p><ol><li><p>先求余数，X &#x3D; X &#x2F; (2的n次方)</p></li><li><p>判断是否在值范围区间，比如 （-128,127）, 在区间内，直接返回</p></li><li><p>如果不在，正数 -  (2的n次方)， 负数 + (2的n次方)</p></li></ol><p>二进制求值： 截断合适的位数，求值，然后通过上面步骤计算</p><p>值求二进制：</p><ol><li><p>先求余数，X &#x3D; X &#x2F; (2的n次方)</p></li><li><p>如果是负数，负数 + (2的n次方)</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性结构</title>
      <link href="/2022/12/29/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/"/>
      <url>/2022/12/29/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>由同类型<strong>数据元素</strong>构成<strong>有序序列</strong>的线性结构</p><ol><li><p>表中元素个数称为线性表的长度</p></li><li><p>线性表没有元素时，称为空表</p></li><li><p>表起始位置称表头，结束位置称表尾</p></li></ol><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ol><li>List MakeEmpty()：初始化一个空线性表L</li><li>ElementType FindKth(int K,List L)：根据位序K，返回相应元素</li><li>int Find(ElementType X,List L)：在线性表L中查找X的第一次出现位置</li><li>void Insert(ElementType X,,int i,List L)：在位序i前插入一个新元素X</li><li>void Delete(int i,List L)：删除指定位序i的元素</li><li>int Length(List L)：返回线性表L的长度n</li></ol><h3 id="存储实现"><a href="#存储实现" class="headerlink" title="存储实现"></a>存储实现</h3><h4 id="利用数组的连续存储空间顺序存放各元素（知道最后元素的位置）"><a href="#利用数组的连续存储空间顺序存放各元素（知道最后元素的位置）" class="headerlink" title="利用数组的连续存储空间顺序存放各元素（知道最后元素的位置）"></a>利用数组的连续存储空间顺序存放各元素（知道最后元素的位置）</h4><h5 id="主要操作实现"><a href="#主要操作实现" class="headerlink" title="主要操作实现"></a>主要操作实现</h5><ol><li>初始化（建立空的顺序表）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List <span class="title function_">MakeEmpty</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List Ptrl;</span><br><span class="line">    Ptrl = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LNode));</span><br><span class="line">    Ptrl-&gt;Last=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> Ptrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>查找</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Find</span><span class="params">(ElementType X,List Ptrl)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=Ptrl-&gt;Last &amp;&amp; Ptrl-&gt;Data[i]!=x)</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;Ptrl-&gt;Last) <span class="keyword">return</span> <span class="number">-1</span>；<span class="comment">//如果没找到返回-1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> i;<span class="comment">//找到后返回存储位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>插入（在数组中是i-1的位置，先移动再插入）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(ElementType X,,<span class="type">int</span> i,List Ptrl)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">if</span>(Ptrl-&gt;Last == MAXSIZE - <span class="number">1</span>)&#123;<span class="comment">//表空间已满，不能在插入</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;表满&quot;</span>)；</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;Ptrl-&gt;Last+<span class="number">2</span>)&#123;<span class="comment">//检查插入的位置的合法性</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;位置不合法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=Ptrl-&gt;Last;j&gt;=i<span class="number">-1</span>;j--)</span><br><span class="line">        Ptrl-&gt;Data[j+<span class="number">1</span>]=Ptrl-&gt;Data[j];<span class="comment">//将i-n元素倒序向后移动</span></span><br><span class="line">    Ptrl-&gt;Data[i<span class="number">-1</span>]=X;<span class="comment">//新元素插入</span></span><br><span class="line">    Ptrl-&gt;Last++;<span class="comment">//更新Last,使其仍指向最后元素</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>删除（后面元素依次前移）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delete</span><span class="params">(<span class="type">int</span> i,List Ptrl)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;Ptrl-&gt;Last+<span class="number">1</span>)&#123;<span class="comment">//检查空表及删除位置的合法性</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不存在第%d个元素&quot;</span>，i);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=i;j&lt;=Ptrl-&gt;Last;j++)</span><br><span class="line">         Ptrl-&gt;Data[j<span class="number">-1</span>]=Ptrl-&gt;Data[j];<span class="comment">//将i+1-n元素顺序向前移动</span></span><br><span class="line">    Ptrl-&gt;Last--;<span class="comment">//更新Last,使其仍指向最后元素</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><h5 id="主要操作实现-1"><a href="#主要操作实现-1" class="headerlink" title="主要操作实现"></a>主要操作实现</h5><ol><li>求表长</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Length</span><span class="params">(List Ptrl)</span></span><br><span class="line">&#123;</span><br><span class="line">    List p=Ptrl;<span class="comment">//p指向表的第一个结点</span></span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        p=p-&gt;Next;</span><br><span class="line">        j++;<span class="comment">//当p指向的是第j个结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>查找</li></ol><p>按序号查找：FindKth</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List <span class="title function_">FindKth</span><span class="params">(<span class="type">int</span> K,List Ptrl)</span></span><br><span class="line">&#123;</span><br><span class="line">    List p=Ptrl;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; i&lt;K)&#123;</span><br><span class="line">        p=p-&gt;Next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i==K) <span class="keyword">return</span> p;<span class="comment">//找到第k个，返回指针</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//否则返回空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按值查找：Find</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List <span class="title function_">Find</span><span class="params">(ElementType X,List Ptrl)</span></span><br><span class="line">&#123;</span><br><span class="line">    List p=Ptrl;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;Data!=X)</span><br><span class="line">        p=p-&gt;Next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>插入</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List <span class="title function_">Insert</span><span class="params">(ElementType X,,<span class="type">int</span> i,List Ptrl)</span></span><br><span class="line">&#123;</span><br><span class="line">    List p,s;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;<span class="comment">//新结点插入在表头</span></span><br><span class="line">        s=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LNode));<span class="comment">//申请、填装结点</span></span><br><span class="line">        s-&gt;Data=X;</span><br><span class="line">        s-&gt;Next=Ptrl;</span><br><span class="line">        <span class="keyword">return</span> s;<span class="comment">//返回新表头指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    p=FindKth(i<span class="number">-1</span>,Ptrl);<span class="comment">//查找第i-1个结点</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;<span class="comment">//第i-1个不存在，不能插入</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;参数i错&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s=(List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LNode));<span class="comment">//申请、填装结点</span></span><br><span class="line">        s-&gt;Data=X;</span><br><span class="line">        s-&gt;Next=p-&gt;Next;<span class="comment">//新结点插入在第i-1个结点的后面</span></span><br><span class="line">        p-&gt;Next=s;</span><br><span class="line">        <span class="keyword">return</span> Ptrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>删除</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">List <span class="title function_">Delete</span><span class="params">(<span class="type">int</span> i,List Ptrl)</span></span><br><span class="line">&#123;</span><br><span class="line">    List p,s;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;<span class="comment">//删除第1个结点</span></span><br><span class="line">        s= Ptrl;<span class="comment">//s指向第1个结点</span></span><br><span class="line">        <span class="keyword">if</span>(Ptrl!=<span class="literal">NULL</span>) Ptrl=Ptrl-&gt;Next;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(s);<span class="comment">//释放被删除结点</span></span><br><span class="line">        <span class="keyword">return</span> Ptrl;</span><br><span class="line">    &#125;</span><br><span class="line">    p=FindKth(i<span class="number">-1</span>,Ptrl);<span class="comment">//查找第i-1个结点</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;<span class="comment">//第i-1个不存在，不能插入</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个结点不存在&quot;</span>，i<span class="number">-1</span>); <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;Next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个结点不存在&quot;</span>，i); <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        s=p-&gt;Next;<span class="comment">//s指向第i个结点</span></span><br><span class="line">        p-&gt;Next=s-&gt;Next;<span class="comment">//从链表中删除</span></span><br><span class="line">        <span class="built_in">free</span>(s);<span class="comment">//释放被删除结点</span></span><br><span class="line">        <span class="keyword">return</span> Ptrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><p>线性表的推广，元素可以是单元素也可以是另一个广义表union</p><h2 id="多重链表"><a href="#多重链表" class="headerlink" title="多重链表"></a>多重链表</h2><p>链表中的结点可能同时隶属于多个链</p><p>但是一个结点包含多个指针并不意味着是多重链表，如双向链表</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构基本概念</title>
      <link href="/2022/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2022/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h2><p>相互之间存在一种或多种特定关系的数据元素的集合</p><h3 id="数据组织"><a href="#数据组织" class="headerlink" title="数据组织"></a>数据组织</h3><h3 id="空间使用"><a href="#空间使用" class="headerlink" title="空间使用"></a>空间使用</h3><h3 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h3><p>写程序计算给定多项式在给定点x处的值</p><p>一般都会这么写，但是这样子效率不高。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n,<span class="type">double</span> a[], <span class="type">double</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">double</span> p=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">p+=(a[i]*<span class="built_in">pow</span>(x,i));</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="标准程序：提出公因子，从里往外算"><a href="#标准程序：提出公因子，从里往外算" class="headerlink" title="标准程序：提出公因子，从里往外算"></a>标准程序：提出公因子，从里往外算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n,<span class="type">double</span> a[], <span class="type">double</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">double</span> p=a[n];</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">p=a[i<span class="number">-1</span>]+x*p;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="捕捉机器运行程序所需要的时间"><a href="#捕捉机器运行程序所需要的时间" class="headerlink" title="捕捉机器运行程序所需要的时间"></a>捕捉机器运行程序所需要的时间</h4><p>函数：clock()：捕捉从程序开始运行到clock()被调用时所耗费的时间。这个时间单位是clock tick，即“时钟打点”</p><p>常数CLK_TCK：机器时钟每秒所走的时钟打点数</p><p>​求一个函数跑了多久：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> start,stop;<span class="comment">//clock_t是clock()函数返回的变量类型</span></span><br><span class="line"><span class="type">double</span> duration;<span class="comment">//记录被测函数运行时间，以秒为单位</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;<span class="comment">//不在测试范围内的准备工作写在clock()调用之前</span></span><br><span class="line">    start=clock();<span class="comment">//开始计时</span></span><br><span class="line">    MyFunction();<span class="comment">//被测函数</span></span><br><span class="line">    stop=clock();<span class="comment">//结束计时</span></span><br><span class="line">    duration=((<span class="type">double</span>)(stop-start))/CLK_TCK;</span><br><span class="line">    <span class="comment">//其他不在测试范围内的处理写在后面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p>抽象：与存放数据的机器无关，与数据存储的物理结构无关，与实现操作的算法和编程语言均无关</p><h2 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h2><h3 id="什么是好的算法"><a href="#什么是好的算法" class="headerlink" title="什么是好的算法"></a>什么是好的算法</h3><p>空间复杂度S(n)</p><p>时间复杂度T(n)最坏情况复杂度，平均情况复杂度</p><h4 id="复杂度分析小窍门"><a href="#复杂度分析小窍门" class="headerlink" title="复杂度分析小窍门"></a>复杂度分析小窍门</h4><p>若两段算法分别有复杂度 T1(n)&#x3D;O(f(n)) 和T2(n)&#x3D;O(g(n))，则</p><p>T1(n) + T2(n)&#x3D;max(O(f(n)),O(g(n)))</p><p>T1(n) * T2(n)&#x3D;O(f(n)) *  O(g(n))</p><p>若T(n)是关于n的k阶多项式，那么T(n)&#x3D;O(n^k)</p><p>一个for循环的时间复杂度&#x3D;循环次数 * 循环体代码复杂度</p><p>if-else 结构的复杂度取决于if的条件判断复杂度和两个分支部分的复杂度，总体复杂度取三者中最大</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="最大连续子列和"><a href="#最大连续子列和" class="headerlink" title="最大连续子列和"></a>最大连续子列和</h3><h4 id="算法一：枚举-T-N-x3D-O-N-3"><a href="#算法一：枚举-T-N-x3D-O-N-3" class="headerlink" title="算法一：枚举 T(N)&#x3D;O(N^3)"></a>算法一：枚举 T(N)&#x3D;O(N^3)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">MaxSubseqSum1</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> N)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ThisSum,MaxSum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">ThisSum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=j;k++)</span><br><span class="line">ThisSum+=A[k];</span><br><span class="line"><span class="keyword">if</span>(ThisSum&gt;MaxSum)</span><br><span class="line">            MaxSum=ThisSum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MaxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法二：T-N-x3D-O-N-2"><a href="#算法二：T-N-x3D-O-N-2" class="headerlink" title="算法二：T(N)&#x3D;O(N^2)"></a>算法二：T(N)&#x3D;O(N^2)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">MaxSubseqSum2</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> N)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ThisSum,MaxSum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line">ThisSum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">ThisSum+=A[j];</span><br><span class="line"><span class="keyword">if</span>(ThisSum&gt;MaxSum)</span><br><span class="line">            MaxSum=ThisSum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MaxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>N^2–&gt;nlogn </p><h4 id="算法三：分而治之。"><a href="#算法三：分而治之。" class="headerlink" title="算法三：分而治之。"></a>算法三：分而治之。</h4><p>数组分为两半，递归的向左向右求最大子列和，找左边的最大子列和、右边的最大子列和、跨越边界的最大子列和，返回三个数中最大的那个。</p><p>T(N)&#x3D;2T(N&#x2F;2)+cN  T(1)&#x3D;O(1)</p><p>–&gt;T(N)&#x3D;2^kO(1)+ckN  其中N&#x2F;2^k&#x3D;1</p><p>–&gt;T(N)&#x3D;O(NlogN)</p><h4 id="算法四：在线处理T-N-x3D-O-N"><a href="#算法四：在线处理T-N-x3D-O-N" class="headerlink" title="算法四：在线处理T(N)&#x3D;O(N)"></a>算法四：在线处理T(N)&#x3D;O(N)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">MaxSubseqSum4</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> N)</span>&#123;</span><br><span class="line">    <span class="type">int</span> ThisSum,MaxSum;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ThisSum=MaxSum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ThisSum+=A[i];</span><br><span class="line">        <span class="keyword">if</span>(ThisSum&gt;MaxSum)</span><br><span class="line">            MaxSum=ThisSum;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ThisSum&lt;<span class="number">0</span>)</span><br><span class="line">            ThisSum=<span class="number">0</span>;<span class="comment">//如果当前子列和为负数，则抛弃</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MaxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看视频</title>
      <link href="/2022/12/28/%E7%9C%8B%E8%A7%86%E9%A2%91/"/>
      <url>/2022/12/28/%E7%9C%8B%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>张老师想看n个视频。每个视频只有一分钟长，但其大小可能是任意的。第i个视频的大小为aiMB。所有视频都发布在互联网上。应该先下载视频，然后才能观看。张老师的宽带网速很慢，下载1MB的数据需要1分钟，因此下载第i个视频需要ai分钟。<br>张老师的电脑有一个 m MB的硬盘用于存储下载的视频。一旦张老师开始下载大小为s的视频，硬盘上的 s MB将立即被占用。如果剩余空间小于s MB，则需要先释放所需空间之前再开始下载。ai≤m，因此每个视频都可以存的下。视频开始下载后就不能中断。不允许同时下载多个视频。<br>当视频完全下载到硬盘上时张老师就可以观看视频。观看每个视频要1分钟，而且不占用网络，因此，张老师可以在观看当前视频的同时开始下载另一个视频。<br>当张老师看完视频后，他可以马上删除硬盘上的视频，删除视频所需的时间可以忽略不计。<br>问：张老师最快看完所有视频的时间是多少。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行包含两个整数n和m（1≤n≤2*105；1≤m≤109），分别是张老师想要观看的视频数量和硬盘大小。</p><p>第二行包含n个整数a1，a2，…，an（1≤ai≤m）-视频的大小。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出一个整数-观看所有n个视频所需的最短时间。</p><p>样例一输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 6</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><p>样例一输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><p>样例二输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 3 2 3</span><br></pre></td></tr></table></figure><p>样例二输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>素数问题</title>
      <link href="/2022/12/28/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2022/12/28/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>任何一个整数，都可以有多个素数相乘，现在给你一个数N(1&lt; N&lt;&#x3D;65535)，请你把它分成多个素数相乘。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入一个整数N，输入0表示结束。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出相应的结果。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">12</span><br><span class="line">16</span><br><span class="line">65535</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2*2*3</span><br><span class="line">2*2*2*2</span><br><span class="line">3*5*17*257</span><br></pre></td></tr></table></figure><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">prime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">4</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i*i&lt;=x;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span> tag=<span class="number">2</span>;</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//变化后的数要重新拿去用if语句做判断就需要一个循环</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span>(<span class="built_in">prime</span>(x))</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(ans&gt;<span class="number">0</span>) cout&lt;&lt;<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">             cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">             <span class="keyword">return</span> ;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(x%tag==<span class="number">0</span>)<span class="comment">//不是素数跳到这里，先除以最小的素数2</span></span><br><span class="line">             <span class="comment">//如果既不是素数，也不是被2整除，再跳到else部分，让除数自增到一个较大的素数</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(ans&gt;<span class="number">0</span>) cout&lt;&lt;<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">             cout&lt;&lt;tag;</span><br><span class="line">             x/=tag;</span><br><span class="line">             ++ans;<span class="comment">//用来控制什么时候输出*这个符号</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             ++tag;</span><br><span class="line">             <span class="keyword">while</span>(!<span class="built_in">prime</span>(tag))<span class="comment">//当除数不是素数时将其自加直到为素数为止</span></span><br><span class="line">                 ++tag;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> n,tag=<span class="number">0</span>,i;</span><br><span class="line">     <span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">     &#123;</span><br><span class="line">     <span class="keyword">if</span>(!n) <span class="keyword">break</span>;</span><br><span class="line">     <span class="built_in">f</span>(n);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转进制质数</title>
      <link href="/2022/12/28/%E8%BD%AC%E8%BF%9B%E5%88%B6%E8%B4%A8%E6%95%B0/"/>
      <url>/2022/12/28/%E8%BD%AC%E8%BF%9B%E5%88%B6%E8%B4%A8%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>现在给你一个数x，然后确定进制B(2&lt;&#x3D;B&lt;&#x3D;16)使得x是质数，输出所有满足条件的B，如果没有满足条件的B，则输出0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool isPrime(long long a)</span><br><span class="line">&#123;</span><br><span class="line">    if(a&lt;2)return 0;</span><br><span class="line">    if(a&lt;4)return 1;</span><br><span class="line">    if(a%2==0)return 0;</span><br><span class="line">    for(int i=3;i*i&lt;=a;i+=2)</span><br><span class="line">        if(a%i==0)return 0;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">long long xtoten(int a,int x)</span><br><span class="line">&#123;</span><br><span class="line">long long s=0,n=0;</span><br><span class="line">while(a)</span><br><span class="line">&#123;</span><br><span class="line">if(a%10&gt;x-1) return 0;//进位 </span><br><span class="line">s+=a%10*pow(x,n);</span><br><span class="line">a/=10;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int x,flag=0;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">for(int i=2;i&lt;=16;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(isPrime(xtoten(x,i)))&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;&quot; &quot;;flag=1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(!flag)cout&lt;&lt;0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2022/12/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/12/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h2><p>​<strong>O(log2n)</strong></p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><pre><code>1. 数组有序2. 查找的数量只有一个</code></pre><h2 id="查找区间"><a href="#查找区间" class="headerlink" title="查找区间"></a>查找区间</h2><p>不同的区间的定义写法不一样，有以下两种写法</p><p>​1. 左闭右闭<code>[left, right]</code></p><p>​2. 左闭右开<code>[left, right)</code></p><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><ol><li>考虑数组元素是否能取到</li><li>while循环中 left 和 right 的关系</li></ol><p>​<code>left &lt;= right</code> or <code>left &lt; right</code></p><pre><code>2. 迭代过程中 mid 和 right 的关系</code></pre><p>​<code>right = mid - 1</code>  or  <code>right = mid</code></p><h2 id="mid取值"><a href="#mid取值" class="headerlink" title="mid取值"></a>mid取值</h2><ol><li><p><code>mid=(left+right)/2</code> 和 <code>mid=left+((right-left)/2)</code>等价，但是<code>left+((right-left)/2)</code>可防止left+right过大程序无法运行</p></li><li><p><code>mid=(left+right)/2+1</code> 整体右偏</p><p>以下对 mid&#x3D;left+((right-left)&#x2F;2)情况进行讨论</p></li></ol><h2 id="对于左闭右闭区间"><a href="#对于左闭右闭区间" class="headerlink" title="对于左闭右闭区间"></a>对于左闭右闭区间</h2><ol><li><p>left &#x3D; 0, right &#x3D; size-1</p></li><li><p>循环条件while(left &lt;&#x3D; right)。因为<code>left == right</code>时有意义</p></li><li><p>如果 <code>a[mid] &gt; target</code> ，则<code>right = mid - 1</code>。 </p><p>因为a[mid] 一定不是 target ，需要把mid - right位置上的数字丢弃，查找范围改为[left , mid - 1]</p></li><li><p>同理，如果 <code>a[mid] &lt; target</code> ，则<code>left = mid + 1</code>。 </p><p>因为a[mid] 一定不是 target ，需要把left - mid位置上的数字丢弃，查找范围改为[mid + 1 , right]</p></li></ol><h2 id="对于左闭右开区间"><a href="#对于左闭右开区间" class="headerlink" title="对于左闭右开区间"></a>对于左闭右开区间</h2><ol><li><p>left &#x3D; 0, right &#x3D; size</p></li><li><p>循环条件while(left &lt; right)。</p></li><li><p>如果 <code>a[mid] &gt; target</code> ，则<code>right = mid</code>。 </p><p>因为a[mid] 大于 target ，需要把mid - right位置上的数字丢弃，且左闭右开，不能取到mid，查找范围改为[left , mid)</p></li><li><p>同理，如果 <code>a[mid] &lt; target</code> ，则<code>left = mid + 1</code>。 </p><p>因为a[mid] 小于 target ，需要把left - mid位置上的数字丢弃，且左闭右开，不能取到mid，查找范围改为(mid , right]</p></li></ol><h2 id="运算过程"><a href="#运算过程" class="headerlink" title="运算过程"></a>运算过程</h2><p>​首先mid和需要查找的目标值比较<br>​1.如果相等，直接返回答案<br>​2.如果不相等<br>​1)如果mid大于目标值，则mid向右的所有数字都大于目标值，全部排除<br>​2)如果mid小于目标值，则mid向左的所有数字都小于目标值，全部排除</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>循环条件</strong>和<strong>后续的区间赋值问题</strong></p><ol><li>循环条件控制区间赋值的边界</li><li>区间赋值left和right关系决定循环是否继续</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入输出运算</title>
      <link href="/2022/12/21/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97/"/>
      <url>/2022/12/21/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h3 id="特殊字符的输出"><a href="#特殊字符的输出" class="headerlink" title="特殊字符的输出"></a>特殊字符的输出</h3><p>转义字符：” \ “后面的字符不代表本身的含义</p><table><thead><tr><th align="center">字符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\f</td><td align="center">换页</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\ \</td><td align="center">表示一个反斜杠字符 ‘ \ ‘</td></tr><tr><td align="center">\ ‘</td><td align="center">表示一个单引号字符 ‘ ‘ ‘</td></tr><tr><td align="center">\ ‘’</td><td align="center">表示一个双引号字符 ‘ “ ‘</td></tr><tr><td align="center">?</td><td align="center">表示一个问号字符 ‘?’</td></tr><tr><td align="center">\0</td><td align="center">空字符（NULL）</td></tr></tbody></table><p>如果希望“\”字符也作为字符串中的一个字符，则应写为“abc\\n”，此时字符包括5个字符：a, b, c, , n。</p><p>常用的输出控制符</p><table><thead><tr><th align="center">控制符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">按十进制整型数据的实际长度输出</td></tr><tr><td align="center">%ld</td><td align="center">输出长整型数据</td></tr><tr><td align="center">%md</td><td align="center">m为指定的输出字段的宽度</td></tr><tr><td align="center">%u</td><td align="center">输出无符号整型</td></tr><tr><td align="center">%c</td><td align="center">输出一个字符</td></tr><tr><td align="center">%f或%lf</td><td align="center">输出实数，包括单精度和双精度，以小数形式输出</td></tr><tr><td align="center">%.mf</td><td align="center">输出实数时小数点后保留m位</td></tr><tr><td align="center">%s</td><td align="center">输出字符串</td></tr></tbody></table><h2 id="输入与记忆"><a href="#输入与记忆" class="headerlink" title="输入与记忆"></a>输入与记忆</h2><h3 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h3><table><thead><tr><th>数据类型</th><th>类型标识符</th><th>存储空间大小(1字节&#x3D;8bits)</th><th>备注</th></tr></thead><tbody><tr><td>字符型</td><td>char</td><td>1</td><td>不可用于运算，主要用于输入输出</td></tr><tr><td>短整型</td><td>short</td><td>2</td><td>可运算</td></tr><tr><td>整型</td><td>int</td><td>4</td><td>可运算</td></tr><tr><td>长整型</td><td>long</td><td>4</td><td>可运算</td></tr><tr><td>单精度型</td><td>float</td><td>4</td><td>实型，可运算</td></tr><tr><td>双精度型</td><td>double</td><td>8</td><td>实型，可运算</td></tr><tr><td>布尔型</td><td>bool</td><td>1</td><td>只有真(true)和假(false)，用于逻辑运算</td></tr></tbody></table><h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h3><table><thead><tr><th>语句</th><th>是否符合语法规则</th></tr></thead><tbody><tr><td>a&#x3D;b&#x3D;c&#x3D;d&#x3D;e&#x3D;5;</td><td>是</td></tr><tr><td>int a&#x3D;5,b,c;</td><td>是</td></tr><tr><td>int a&#x3D;b&#x3D;c&#x3D;5;</td><td>否</td></tr><tr><td>int a&#x3D;5,b&#x3D;6,c;c&#x3D;a+b;</td><td>是</td></tr></tbody></table><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="“-”运算符-‘’–’’-同"><a href="#“-”运算符-‘’–’’-同" class="headerlink" title="“++”运算符 ( ‘’–’’ 同 )"></a>“++”运算符 ( ‘’–’’ 同 )</h3><p>表示自加一，相当于i&#x3D;i+1。</p><p>“++”运算符有 “i++” 和 “++i” 两种形式，前者表示先赋值在计算，后者表示先计算再赋值。</p><h3 id="关系表达式与关系运算"><a href="#关系表达式与关系运算" class="headerlink" title="关系表达式与关系运算"></a>关系表达式与关系运算</h3><p>优先级： 算术运算符&gt;关系运算符&gt;赋值运算符</p><p>​a+b&lt;c+d 等效于 (a+b)&lt;(c+d)</p><p>​a&#x3D;&#x3D;b&lt;c 等效于 a&#x3D;&#x3D;(b&lt;c)</p><p>​(a&#x3D;3)!&#x3D;(b&#x3D;3)输出0注意区分<strong>关系运算符“&#x3D;&#x3D;”</strong>和<strong>赋值运算符“&#x3D;”</strong></p><p>运算结果：是一个逻辑值，即“真”或“假”</p><h3 id="逻辑表达式与逻辑运算"><a href="#逻辑表达式与逻辑运算" class="headerlink" title="逻辑表达式与逻辑运算"></a>逻辑表达式与逻辑运算</h3><p>推荐使用小括号()，以便更明确地表示运算优先级</p><p>优先级：逻辑非&gt;算术运算符&gt;关系运算符&gt;逻辑与&gt;逻辑或&gt;赋值运算符</p><p>运算结果：是一个逻辑值，即“真”或“假”（结果为“0”则为“假”，结果“非0值”，则为“真”）</p><p>之前碰到这样一个填空题，求输出。根据上面内容可以知道</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">4</span>,b=<span class="number">3</span>,c=<span class="number">5</span>;</span><br><span class="line">cout&lt;&lt;(a||b+c&amp;&amp;b<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;(!(a+b)+c<span class="number">-1</span>&amp;&amp;b+c/<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>两行输出等价于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;(a||(b+c)&amp;&amp;(b<span class="number">-1</span>))&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;(!(a+b)+(c<span class="number">-1</span>)&amp;&amp;(b+c/<span class="number">2</span>))&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>于是可以知道输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>若变成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">4</span>,b=<span class="number">3</span>,c=<span class="number">5</span>;</span><br><span class="line">cout&lt;&lt;(a||b+c&amp;&amp;b<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;(a+b+c<span class="number">-1</span>&amp;&amp;b+c/<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>因为整个(a+b+c-1&amp;&amp;b+c&#x2F;2)是一种运算式，用括号表示整体，所以输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>若<code>a+b+c-1&amp;&amp;b+c/2</code>不用括号括起来，会报错。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和最大公约数死磕到底</title>
      <link href="/2022/12/17/%E5%92%8C%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E6%AD%BB%E7%A3%95%E5%88%B0%E5%BA%95/"/>
      <url>/2022/12/17/%E5%92%8C%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E6%AD%BB%E7%A3%95%E5%88%B0%E5%BA%95/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>你有一个长度为n的数组a，你可以执行操作。每个操作是这样的:从a中选择两个相邻的元素，比如x和y，并将其中一个替换为gcd(x, y)，其中gcd表示最大公约数。 </p><p>要使所有元素都等于1，最少需要多少次操作?</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入的第一行包含一个整数n(1≤n≤2000)——数组中的元素数量。</p><p>第二行包含n个用空格分隔的整数a1, a2，…， an(1 ≤ ai ≤ 10e9)-数组的元素。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>如果不可能将所有数字都变成1，则输出-1。否则，打印使所有数字等于1所需的最小操作次数。</p><p>样例1输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2 2 3 4 6</span><br></pre></td></tr></table></figure><p>样例1输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>样例2输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2 4 6 8</span><br></pre></td></tr></table></figure><p>样例2输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><p>样例3输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2 6 9</span><br></pre></td></tr></table></figure><p>样例3输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从样例2可以看出，若一组数据中没有互质的数，则不可能变成1。也就是说，只要能找到互质的数，就能实现全部变成1的操作。</p><p>若一组数据中有1，则可以实现全部变成1的操作，此时为n-f (f为1的个数）。若一组数据中没有1，首先可以通过遍历的方式，进行两个数两个数比较，判断这组数据是否互质（即最大公约数是否为0）。</p><p>若不能找到，则说明这组数据中没有互质的数，因此输出-1；若能找到，(在题中就是取a[i]和a[i+1]），将gcd(a[i],a[i+1])赋给a[i]，如此循环操作，最后输出。</p><h2 id="AC代码Ⅰ"><a href="#AC代码Ⅰ" class="headerlink" title="AC代码Ⅰ"></a>AC代码Ⅰ</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;q) <span class="built_in">swap</span>(p,q);</span><br><span class="line">    <span class="keyword">if</span>(p%q==<span class="number">0</span>) <span class="keyword">return</span> q;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(q,p%q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> *a=<span class="keyword">new</span> <span class="type">int</span> [n];</span><br><span class="line">    <span class="type">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">1</span>)f++;<span class="comment">//用于记录1的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)cout&lt;&lt;n-f;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n-i;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">gcd</span>(a[j],a[j+<span class="number">1</span>])==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    f=<span class="number">1</span>;<span class="comment">//存在互质的相邻数 </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">a[j]=<span class="built_in">gcd</span>(a[j],a[j+<span class="number">1</span>]); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(f)<span class="keyword">break</span>;</span><br><span class="line">           t++; <span class="comment">//遍历次数 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!f)cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;n+t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AC代码Ⅱ"><a href="#AC代码Ⅱ" class="headerlink" title="AC代码Ⅱ"></a>AC代码Ⅱ</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p&lt;q)<span class="built_in">swap</span>(p,q);</span><br><span class="line"><span class="keyword">if</span>(p%q==<span class="number">0</span>)<span class="keyword">return</span> q;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(q,p%q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,sum=<span class="number">0</span>,f=<span class="number">0</span>,res=<span class="number">-1</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> *a=<span class="keyword">new</span> <span class="type">int</span> [n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">1</span>)f++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f)cout&lt;&lt;n-f;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line">a[j]=<span class="built_in">gcd</span>(a[j],a[j+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(a[j]==<span class="number">1</span>)</span><br><span class="line">&#123;flag=<span class="number">1</span>;</span><br><span class="line">res=n-i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)<span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res!=<span class="number">-1</span>)cout&lt;&lt;n+res<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> [] a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态定义内存</title>
      <link href="/2022/12/15/%E5%8A%A8%E6%80%81%E5%AE%9A%E4%B9%89%E5%86%85%E5%AD%98/"/>
      <url>/2022/12/15/%E5%8A%A8%E6%80%81%E5%AE%9A%E4%B9%89%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="动态申请、释放内存"><a href="#动态申请、释放内存" class="headerlink" title="动态申请、释放内存"></a>动态申请、释放内存</h2><h3 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申请</span></span><br><span class="line"><span class="type">int</span>* a=<span class="keyword">new</span> <span class="type">int</span> [n];<span class="comment">//int* a=(int*)malloc(sizeof(int)*n);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="keyword">delete</span> [] a;a=<span class="literal">NULL</span>;<span class="comment">//free(a);</span></span><br></pre></td></tr></table></figure><h3 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申请</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一维数组</p><p>二维数组</p><p>结构体动态申请</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2022/12/15/%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/12/15/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>以升序为例：每次将相邻的两个数进行比较，将较大的放到后面，每一趟比较都将当前最大的数字排到最后面，然后从头再开始进行下一趟比较。 (若有 n 个数字，当完成 n - 1 趟比较后，便完成了排序)</p><p>也就是假设n个数，那么就要进行n-1 步，第i 步中则需要n-i 次比较。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入数字个数！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span>* a=<span class="keyword">new</span> <span class="type">int</span> [n];</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;个数字！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++) &#123;                  <span class="comment">//第i轮</span></span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++) &#123;      <span class="comment">//在每一步进行n-1-i次两两比较，每一轮比上一轮少一步</span></span><br><span class="line"><span class="keyword">if</span> (a[j]&gt;a[j+<span class="number">1</span>]) &#123;<span class="comment">//注意下标不能越界 相邻的两个数比较大小</span></span><br><span class="line"><span class="built_in">swap</span>(a[j],a[j+<span class="number">1</span>]);<span class="comment">//交换两个数的位置，使大数上浮</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;排序后的数据是：&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">delete</span> [] a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>以升序为例：取第一个数与后面的数进行比较，记录最小的数的坐标，最后交换。然后从第二个数开始进行下一趟比较。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入数字个数！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span>* a=<span class="keyword">new</span> <span class="type">int</span> [n];</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;个数字！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++) &#123;</span><br><span class="line">        k=i;</span><br><span class="line"><span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;n;j++) &#123;      </span><br><span class="line"><span class="keyword">if</span> (a[k]&gt;a[j]) &#123;</span><br><span class="line">k=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span>(k!=i) <span class="built_in">swap</span>(a[k],a[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;排序后的数据是：&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">delete</span> [] a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序sort"><a href="#快速排序sort" class="headerlink" title="快速排序sort"></a>快速排序sort</h2><h3 id="C-语言的头文件："><a href="#C-语言的头文件：" class="headerlink" title="C++ 语言的头文件："></a>C++ 语言的头文件：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="sort-函数可以给出三个参数："><a href="#sort-函数可以给出三个参数：" class="headerlink" title="sort 函数可以给出三个参数："></a>sort 函数可以给出三个参数：</h3><p>​sort(begin, end, cmp);</p><p>其中：</p><p>第一个参数为起始位置的指针，它是<strong>必须</strong>给出的；<br>第二个参数为终止位置的指针，它也是<strong>必须</strong>给出的；<br>第三个参数为比较函数，即排序后所有相邻的元素需要满足的要求，可以不给出，不给出默认为进行<strong>非递减排序</strong>。</p><h3 id="排序范围"><a href="#排序范围" class="headerlink" title="排序范围"></a>排序范围</h3><p>sort 函数会对指针所指向的 <strong>[begin,end)</strong> 这一左闭右开区间范围内的元素进行排序。</p><p>​设一个数组 b，则：<strong>sort(b + l, b + r + 1)</strong>;即可对数组 b 内的 <strong>b[l] 到 b[r]</strong> 范围内的元素进行<strong>非递减排序</strong>。</p><h3 id="cmp-参数"><a href="#cmp-参数" class="headerlink" title="cmp 参数"></a>cmp 参数</h3><h4 id="greater"><a href="#greater" class="headerlink" title="greater()"></a>greater<int>()</h4><p>​从小到大排序</p><p>​&lt;&gt;可以是int,double,long,float</p><h4 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h4><p>如果想要进行非递增排序或者一些特殊的自定义排序（例如当元素为结构体类型时，如何排序是需要自行定义的），则可以写一个返回值为 bool 类型的 compare 函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>(), cmp);</span><br></pre></td></tr></table></figure><p>即可对变量 a 内的所有元素进行从<strong>大到小</strong>排序。</p><p>第三个参数填入 compare 函数的名称 cmp，所有相邻的元素在排序完后，都会符合给出的 compare 函数内的规则。</p><p>compare 函数内应该穿入两个相同数据类型的变量，并且数据类型也应与需要排序的变量内的元素的数据类型相同。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制转换</title>
      <link href="/2022/12/15/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
      <url>/2022/12/15/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221215133916179.png" alt="image-20221215133916179"></p><p>进制转换</p><p>十进制转为其他进制、其他进制转为十进制</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长不下降子序列</title>
      <link href="/2022/12/13/%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2022/12/13/%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>类似的问题还有导弹拦截等等。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>设有由n个不相同的整数组成的数列，记为:b(1)、b(2)、……、b(n)且b(i)!&#x3D;b(j) (i!&#x3D;j)，若存在i1&lt;i2&lt;i3&lt; … &lt; ie 且有b(i1)&lt;b(i2)&lt; … &lt;b(ie)则称为长度为e的不下降序列。程序要求，当原数列出之后，求出最长的不下降序列。</p><p>​    例如13，7，9，16，38，24，37，18，44，19，21，22，63，15。例中13，16，18，19，21，22，63就是一个长度为7的不下降序列，同时也有7 ，9，16，18，19，21，22，63长度为8的不下降序列。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一个整数N&lt;100，然后是N个空格隔开的正整数</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出最长的不下降子序列的长度</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">14</span><br><span class="line">13 7 9 16 38 24 37 18 44 19 21 22 63 15</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先先输入序列，枚举。假设这是第n个数，这个数的序列为1，接着看1~n-1个数的序列，若大小 小于等于第n个数（题目求不下降）且数的序列大于等于第n个数的序列，则更新第n个数的序列。接着找出序列最大值即为最长不下降子序列的长度。（最长不下降子序列可能有很多个，但是长度只会有一个）</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><h4 id="Ⅰ"><a href="#Ⅰ" class="headerlink" title="Ⅰ"></a>Ⅰ</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">101</span>],b[<span class="number">101</span>],ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">b[i]=<span class="number">1</span>;<span class="comment">//自身开始算第一个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;=a[i]&amp;&amp;b[j]&gt;=b[i])</span><br><span class="line">b[i]=b[j]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,b[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="Ⅱ"><a href="#Ⅱ" class="headerlink" title="Ⅱ"></a>Ⅱ</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> SIZE=<span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> height[SIZE],num[SIZE],n,ans;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;height[i];</span><br><span class="line">        num[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((height[j]&lt;height[i])&amp;&amp;(num[j]&gt;=num[i]))</span><br><span class="line">                num[i]=num[j]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i]&gt;ans)ans =num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求最大公约数</title>
      <link href="/2022/12/13/%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
      <url>/2022/12/13/%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,t;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b)</span><br><span class="line">&#123;</span><br><span class="line">t=a;</span><br><span class="line">a=b;</span><br><span class="line">b=t;<span class="comment">//swap(a,b)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> r=a%b;</span><br><span class="line"><span class="keyword">while</span>(r)</span><br><span class="line">&#123;</span><br><span class="line">a=b;</span><br><span class="line">b=r;</span><br><span class="line">r=a%b;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="辗转相减法-效率低于辗转相除法"><a href="#辗转相减法-效率低于辗转相除法" class="headerlink" title="辗转相减法(效率低于辗转相除法)"></a>辗转相减法(效率低于辗转相除法)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,t;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        t=a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=t;<span class="comment">//swap(a,b)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="type">int</span> r=a-b;</span><br><span class="line"><span class="keyword">while</span>(r)</span><br><span class="line">&#123;</span><br><span class="line">        a=b;</span><br><span class="line">        b=r;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b)<span class="built_in">swap</span>(a,b);<span class="comment">//需要保证大数-小数</span></span><br><span class="line">        r=a-b;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p&lt;q)<span class="built_in">swap</span>(p,q);</span><br><span class="line"><span class="keyword">if</span>(p%q==<span class="number">0</span>) <span class="keyword">return</span> q;<span class="comment">//if(q==0) return p;</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(q,p%q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">cout&lt;&lt;<span class="built_in">gcd</span>(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++中关于fixed setprecision()的用法</title>
      <link href="/2022/12/13/cpp%E4%B8%AD%E5%85%B3%E4%BA%8Efixed%20setprecision()%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2022/12/13/cpp%E4%B8%AD%E5%85%B3%E4%BA%8Efixed%20setprecision()%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>记得加上头文件<iomanip>。</p><h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h3><p>只使用 fixed，会显示全部的数据，但是会自动保留六位小数</p><h3 id="setprecision"><a href="#setprecision" class="headerlink" title="setprecision"></a>setprecision</h3><p>设置小数点精度</p><h3 id="fixed-setprecision"><a href="#fixed-setprecision" class="headerlink" title="fixed setprecision()"></a>fixed setprecision()</h3><p>C++中setprecision () 的调用是一直存在的。调用新的参数之后才会呈现新的调用结果。</p><p>例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setpresicion</span>(<span class="number">3</span>)&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将会得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.000</span><br><span class="line">2.000</span><br></pre></td></tr></table></figure><p>那么要想清除设置的参数，得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.000</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>该怎么办呢？</p><p>很简单，我们只需要加上setprecision(0) 控制小数点后位数为0点即可；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setpresicion</span>(<span class="number">3</span>)&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">0</span>)&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杨辉三角的三种求法</title>
      <link href="/2022/11/22/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
      <url>/2022/11/22/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<p>求出杨辉三角中第m行的第n个数（按从左往右的顺序）</p><h2 id="数组循环"><a href="#数组循环" class="headerlink" title="数组循环"></a>数组循环</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a[<span class="number">40</span>][<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">1</span>||j==i)</span><br><span class="line">                a[i][j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a[i][j]=a[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i<span class="number">-1</span>][j];</span><br><span class="line">    cout&lt;&lt;a[m][n]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们先引入一个求组合数的模型</p><h2 id="模型：快速求组合数"><a href="#模型：快速求组合数" class="headerlink" title="模型：快速求组合数"></a>模型：快速求组合数</h2><p>原理：分子与分母中会存在相同的数，可消。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a,b,s=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=a;i&lt;=b;i++,j--) <span class="comment">//i为分母，j为分子</span></span><br><span class="line">        s=s*j/i;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> s=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(fenmu=<span class="number">1</span>,fenzi=m<span class="number">-1</span>;fenmu&lt;n;fenmu++,fenzi--)</span><br><span class="line">        s=s*fenzi/fenmu;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>随着层数增加，递归写法会造成时间超限问题，因此需要采取<strong>记忆化搜索</strong>的方式减少次数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">40</span>][<span class="number">40</span>];</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">triangle</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>||n==m)</span><br><span class="line">        &#123;   </span><br><span class="line">            a[m][n]=<span class="number">1</span>;<span class="comment">//记录已经运算过的数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[m][n]) <span class="keyword">return</span> a[m][n];<span class="comment">//记忆化搜索</span></span><br><span class="line">    <span class="keyword">return</span> a[m][n]=<span class="built_in">triangle</span>(m<span class="number">-1</span>,n<span class="number">-1</span>)+<span class="built_in">triangle</span>(m<span class="number">-1</span>,n);<span class="comment">//记录已经运算过的数,递归</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">triangle</span>(m,n)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔问题</title>
      <link href="/2022/11/16/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
      <url>/2022/11/16/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>汉诺塔问题是典型的递归问题，首先需要对递归有初步的认知</p><h2 id="递归函数定义"><a href="#递归函数定义" class="headerlink" title="递归函数定义"></a>递归函数定义</h2><p>1.明确函数的使命</p><p>2.明确原问题和子问题</p><p>3.兼顾原问题和子问题（清楚如何定义递归函数才能同时调用原问题和子问题）</p><h2 id="基础情况处理"><a href="#基础情况处理" class="headerlink" title="基础情况处理"></a>基础情况处理</h2><p>数据规模较小时直接返回答案（终止条件）</p><h2 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h2><p>这一步被称为超级操作（将其看成整体，不要去纠结中间是怎么实现的）</p><h2 id="递归到当前层"><a href="#递归到当前层" class="headerlink" title="递归到当前层"></a>递归到当前层</h2><p>称为微操作</p><p>为了更加清楚的了解递归函数，现在将其和数学归纳法类比</p><h2 id="递归和数学归纳法的相似处"><a href="#递归和数学归纳法的相似处" class="headerlink" title="递归和数学归纳法的相似处"></a>递归和数学归纳法的相似处</h2><p>​    归纳奠基—&gt;基础情况处理<br>​    归纳假设—&gt;递归调用<br>​    归纳递推—&gt;递归到当前层</p><h2 id="以汉诺塔问题为例实现递归"><a href="#以汉诺塔问题为例实现递归" class="headerlink" title="以汉诺塔问题为例实现递归"></a>以汉诺塔问题为例实现递归</h2><h3 id="基本情况处理"><a href="#基本情况处理" class="headerlink" title="基本情况处理"></a>基本情况处理</h3><p>一片圆盘时，只需一步。</p><h3 id="递归调用、递推到当前层"><a href="#递归调用、递推到当前层" class="headerlink" title="递归调用、递推到当前层"></a>递归调用、递推到当前层</h3><p>以三片圆盘为例</p><p>1.超级操作（上面两个小圆盘从A-&gt;B）</p><p>2.微操作（最下面一个大圆盘A-&gt;C）</p><p>3.超级操作（上面两个小圆盘从B-&gt;C）</p><p>以此类推，当有n个圆盘时</p><p>1.超级操作（上面n-1个小圆盘从A-&gt;B）</p><p>2.微操作（最下面一个大圆盘A-&gt;C）</p><p>3.超级操作（上面n-1个小圆盘从B-&gt;C）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Hanoi</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Hanoi</span>(n<span class="number">-1</span>)+<span class="number">1</span>+<span class="built_in">Hanoi</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">Hanoi</span>(n)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鸣谢：<br>本篇博客学习出处 <a href="https://www.bilibili.com/video/BV1C14y1V77j/?share_source=copy_webvd_source=ba9680a64ad714197865e9a659f8779e">https://www.bilibili.com/video/BV1C14y1V77j/?share_source=copy_webvd_source=ba9680a64ad714197865e9a659f8779e</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于自定义函数</title>
      <link href="/2022/11/15/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/"/>
      <url>/2022/11/15/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>最近在学自定义函数，这里总结一下几个常用的（可能考试会用到的）</p><h3 id="判断是否为素数"><a href="#判断是否为素数" class="headerlink" title="判断是否为素数"></a>判断是否为素数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">4</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i*i&lt;=a;i+=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否为回文数（回文字符）即-对称"><a href="#判断是否为回文数（回文字符）即-对称" class="headerlink" title="判断是否为回文数（回文字符）即 对称"></a>判断是否为回文数（回文字符）即 对称</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isHWS</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">1001</span>],num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        b[num++]=a%<span class="number">10</span>;</span><br><span class="line">        a/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>,r=num<span class="number">-1</span>;l&lt;r;l++,r--)</span><br><span class="line">        <span class="keyword">if</span>(b[l]!=b[r]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> q,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q%p!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t=q%p;</span><br><span class="line">        q=p;</span><br><span class="line">        p=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数运用辗转相除法求最大公约数。</p><p>接下来用递归的方法写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p%q==<span class="number">0</span>)<span class="keyword">return</span> q;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(q,p%q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意递归函数必须要有终止条件。</p><p>cpp中也有自带的函数求最大公约数  __gcd(a.b)<br>头文件 algorithm<br>该函数int 型和 long long 型都可以，但是要注意a,b类型需一致，且不能为浮点数。</p><h3 id="将十进制数转化为n进制数（以二进制为例）"><a href="#将十进制数转化为n进制数（以二进制为例）" class="headerlink" title="将十进制数转化为n进制数（以二进制为例）"></a>将十进制数转化为n进制数（以二进制为例）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bin</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;<span class="number">2</span>) cout&lt;&lt;p;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bin</span>(p/<span class="number">2</span>);</span><br><span class="line">        cout&lt;&lt;p%<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者我们可以将其保存在字符数组中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">bin</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string t=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="built_in">char</span>(a%<span class="number">2</span>+<span class="string">&#x27;0&#x27;</span>)+t;<span class="comment">//若没有+&#x27;0&#x27;,则强制转换结果为ACSII码a%2所对应的值，与数字字符不相等</span></span><br><span class="line">        a/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求斐波那契数列第n项"><a href="#求斐波那契数列第n项" class="headerlink" title="求斐波那契数列第n项"></a>求斐波那契数列第n项</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fibo</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c=a+b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们用递归的方法再写一遍</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fibo</span><span class="params">(n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Fibo</span>(n<span class="number">-1</span>)+<span class="built_in">Fibo</span>(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>由上面的自定义函数可知，用递归方法写函数可以使代码简化，但是运算量很大，容易造成时间超限问题。因此我们可以采取 记忆化搜索 的方法来优化。</p><p>以 求斐波那契第n项 为例<br>取一个数组ff，记录已取的第n项值的大小，这样就不用反复计算，简化运算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> ff[<span class="number">10001</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Fibo</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ff[n]&gt;<span class="number">0</span>) <span class="keyword">return</span> ff[n];</span><br><span class="line">    ff[n]=<span class="built_in">Fibo</span>(n<span class="number">-1</span>)+<span class="built_in">Fibo</span>(n<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">return</span> ff[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不下降序列</title>
      <link href="/2022/11/14/%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%BA%8F%E5%88%97/"/>
      <url>/2022/11/14/%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="不下降序列"><a href="#不下降序列" class="headerlink" title="不下降序列"></a>不下降序列</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个正整数n与n个正整数序列a1,a2,…,an。(1≤n≤100000,1≤ai≤n)每一次你可以做以下操作：<br>(1)选择一个正整数x<br>(2)将所有等于x的数改为0<br>查找将a序列变为不下降序列的最少操作次数。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行为正整数T(1≤T≤10000),表示有T组测试数据。<br>每组测试数据包括两行,第一行为整数n(1≤n≤100000);第二行为n个正整数a1,a2,…an(1≤ai≤n)。<br>测试数据保证所有的n之和不超过100000。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>每组数据输出一行，每行一个整数，表示最少操作次数。</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3</span><br><span class="line">3 3 2</span><br><span class="line">4</span><br><span class="line">1 3 1 3</span><br><span class="line">5</span><br><span class="line">4 1 5 3 2</span><br><span class="line">4</span><br><span class="line">2 4 1 2</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>第一组测试数据，选择x&#x3D;3进行操作，操作后得到序列为[0,0,2].<br>第二组测试数据，第一次选择x&#x3D;1,第二次选择x&#x3D;3,操作后得到序列为[0,0,0,0]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要求须保证整体序列是不严格递增的，因此可以从序列的最后一个数字开始往前找，若遇到比该数字大的数，则将所有的这个数变为0。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="type">int</span> t,n,a[<span class="number">100005</span>],b[<span class="number">100005</span>],ans;<span class="comment">//全局变量默认是0 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>( t -- )</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"> <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)cin&gt;&gt;a[ i ];</span><br><span class="line"> <span class="type">int</span> p=n;</span><br><span class="line">  <span class="keyword">while</span>( a[ p ] &gt;= a[ p - <span class="number">1</span> ] ) p--;</span><br><span class="line">  p--;</span><br><span class="line">  <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">1</span> ; i &lt;= p ; i ++)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>( b[ a[ i ] ] == <span class="number">0</span> )</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">for</span>( <span class="type">int</span> j = n ; j &gt;= p ; j -- )</span><br><span class="line">   <span class="keyword">if</span>( a[ i ] == a[ j ] ) p=j;<span class="comment">//前面数x变零，找后面有没有x，有x的话p要改成x这个位置 </span></span><br><span class="line">   ans++;</span><br><span class="line">   b[ a[ i ] ] = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in">sizeof</span>(b));</span><br><span class="line">   ans=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HELLO WORLD</title>
      <link href="/2022/11/05/2022-11-5-HELLOWORLD/"/>
      <url>/2022/11/05/2022-11-5-HELLOWORLD/</url>
      
        <content type="html"><![CDATA[<h2 id="“Hello-World-”"><a href="#“Hello-World-”" class="headerlink" title="“Hello, World!”"></a>“Hello, World!”</h2><p>这是我的第一篇博客，记录一下他的诞生。<br>接下来初步的打算是整理一下自己半个学期学的东西，发到博客上。<br>以及 祝事事顺利。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
